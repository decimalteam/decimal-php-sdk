<?php

namespace Tests\Unit;

use App\Models\UserMobile;
use App\Models\UserTelegram;
use App\Porto\Task\User\GetCodeConfirmEmailTask;
use DecimalSDK\Errors\DecimalException;
use DecimalSDK\TransactionDecimal;
use DecimalSDK\Utils\WalletHelpers;
use DecimalSDK\Wallet;
use Tests\TestCase;

class NftTest extends TestCase
{

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->getFaucetCoin();
        $this->createTrx($this->addressSend);
    }

    public function testCreateNewNft()
    {
        $characters = "CadgWIHKcOkPzn5X0Eji96F7RLiLAxPQ";
        $randomString = '';
        for ($i = 0; $i < strlen($characters); $i++) {
            $index = rand(0, strlen($characters) - 1);
            $randomString .= $characters[$index];
        }
        $assetHash = hash_file('sha1', dirname(__DIR__) . '/img_nft/nft_cover.png', false);
        $coverHash = hash_file('sha1', dirname(__DIR__) . '/img_nft/nft_image.png', false);
        $id = $this->transaction->generateNftId('headline', 'description', $randomString, $coverHash, $assetHash);

        $payload = [
            'id'=> $id,
            'denom'=> 'Testsdkup',
            'tokenUri'=> 'https://devnet-nft.decimalchain.com/api/nfts/' . $randomString,
            'quantity'=> '4',
            'reserveDenom'=> 'del',
            'reserveAmount'=> '10',
            'allowMint'=> true,
        ];

        $result = $this->transaction->mintNft($payload);

        $this->assertEquals(0, $result->tx_response->code);
    }

}
