<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: ibc/lightclients/solomachine/v2/solomachine.proto

namespace Ibc\Lightclients\Solomachine\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * ClientState defines a solo machine client that tracks the current consensus
 * state and if the client is frozen.
 *
 * Generated from protobuf message <code>ibc.lightclients.solomachine.v2.ClientState</code>
 */
class ClientState extends \Google\Protobuf\Internal\Message
{
    /**
     * latest sequence of the client state
     *
     * Generated from protobuf field <code>uint64 sequence = 1 [json_name = "sequence"];</code>
     */
    protected $sequence = 0;
    /**
     * frozen sequence of the solo machine
     *
     * Generated from protobuf field <code>bool is_frozen = 2 [json_name = "isFrozen", (.gogoproto.moretags) = "yaml:\"is_frozen\""];</code>
     */
    protected $is_frozen = false;
    /**
     * Generated from protobuf field <code>.ibc.lightclients.solomachine.v2.ConsensusState consensus_state = 3 [json_name = "consensusState", (.gogoproto.moretags) = "yaml:\"consensus_state\""];</code>
     */
    protected $consensus_state = null;
    /**
     * when set to true, will allow governance to update a solo machine client.
     * The client will be unfrozen if it is frozen.
     *
     * Generated from protobuf field <code>bool allow_update_after_proposal = 4 [json_name = "allowUpdateAfterProposal", (.gogoproto.moretags) = "yaml:\"allow_update_after_proposal\""];</code>
     */
    protected $allow_update_after_proposal = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $sequence
     *           latest sequence of the client state
     *     @type bool $is_frozen
     *           frozen sequence of the solo machine
     *     @type \Ibc\Lightclients\Solomachine\V2\ConsensusState $consensus_state
     *     @type bool $allow_update_after_proposal
     *           when set to true, will allow governance to update a solo machine client.
     *           The client will be unfrozen if it is frozen.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Ibc\Lightclients\Solomachine\V2\Solomachine::initOnce();
        parent::__construct($data);
    }

    /**
     * latest sequence of the client state
     *
     * Generated from protobuf field <code>uint64 sequence = 1 [json_name = "sequence"];</code>
     * @return int|string
     */
    public function getSequence()
    {
        return $this->sequence;
    }

    /**
     * latest sequence of the client state
     *
     * Generated from protobuf field <code>uint64 sequence = 1 [json_name = "sequence"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setSequence($var)
    {
        GPBUtil::checkUint64($var);
        $this->sequence = $var;

        return $this;
    }

    /**
     * frozen sequence of the solo machine
     *
     * Generated from protobuf field <code>bool is_frozen = 2 [json_name = "isFrozen", (.gogoproto.moretags) = "yaml:\"is_frozen\""];</code>
     * @return bool
     */
    public function getIsFrozen()
    {
        return $this->is_frozen;
    }

    /**
     * frozen sequence of the solo machine
     *
     * Generated from protobuf field <code>bool is_frozen = 2 [json_name = "isFrozen", (.gogoproto.moretags) = "yaml:\"is_frozen\""];</code>
     * @param bool $var
     * @return $this
     */
    public function setIsFrozen($var)
    {
        GPBUtil::checkBool($var);
        $this->is_frozen = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.ibc.lightclients.solomachine.v2.ConsensusState consensus_state = 3 [json_name = "consensusState", (.gogoproto.moretags) = "yaml:\"consensus_state\""];</code>
     * @return \Ibc\Lightclients\Solomachine\V2\ConsensusState|null
     */
    public function getConsensusState()
    {
        return $this->consensus_state;
    }

    public function hasConsensusState()
    {
        return isset($this->consensus_state);
    }

    public function clearConsensusState()
    {
        unset($this->consensus_state);
    }

    /**
     * Generated from protobuf field <code>.ibc.lightclients.solomachine.v2.ConsensusState consensus_state = 3 [json_name = "consensusState", (.gogoproto.moretags) = "yaml:\"consensus_state\""];</code>
     * @param \Ibc\Lightclients\Solomachine\V2\ConsensusState $var
     * @return $this
     */
    public function setConsensusState($var)
    {
        GPBUtil::checkMessage($var, \Ibc\Lightclients\Solomachine\V2\ConsensusState::class);
        $this->consensus_state = $var;

        return $this;
    }

    /**
     * when set to true, will allow governance to update a solo machine client.
     * The client will be unfrozen if it is frozen.
     *
     * Generated from protobuf field <code>bool allow_update_after_proposal = 4 [json_name = "allowUpdateAfterProposal", (.gogoproto.moretags) = "yaml:\"allow_update_after_proposal\""];</code>
     * @return bool
     */
    public function getAllowUpdateAfterProposal()
    {
        return $this->allow_update_after_proposal;
    }

    /**
     * when set to true, will allow governance to update a solo machine client.
     * The client will be unfrozen if it is frozen.
     *
     * Generated from protobuf field <code>bool allow_update_after_proposal = 4 [json_name = "allowUpdateAfterProposal", (.gogoproto.moretags) = "yaml:\"allow_update_after_proposal\""];</code>
     * @param bool $var
     * @return $this
     */
    public function setAllowUpdateAfterProposal($var)
    {
        GPBUtil::checkBool($var);
        $this->allow_update_after_proposal = $var;

        return $this;
    }

}

