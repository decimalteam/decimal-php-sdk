<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proofs.proto

namespace Ics23;

use UnexpectedValueException;

/**
 *LengthOp defines how to process the key and value of the LeafOp
 *to include length information. After encoding the length with the given
 *algorithm, the length will be prepended to the key and value bytes.
 *(Each one with it's own encoded length)
 *
 * Protobuf type <code>ics23.LengthOp</code>
 */
class LengthOp
{
    /**
     * NO_PREFIX don't include any length info
     *
     * Generated from protobuf enum <code>NO_PREFIX = 0;</code>
     */
    const NO_PREFIX = 0;
    /**
     * VAR_PROTO uses protobuf (and go-amino) varint encoding of the length
     *
     * Generated from protobuf enum <code>VAR_PROTO = 1;</code>
     */
    const VAR_PROTO = 1;
    /**
     * VAR_RLP uses rlp int encoding of the length
     *
     * Generated from protobuf enum <code>VAR_RLP = 2;</code>
     */
    const VAR_RLP = 2;
    /**
     * FIXED32_BIG uses big-endian encoding of the length as a 32 bit integer
     *
     * Generated from protobuf enum <code>FIXED32_BIG = 3;</code>
     */
    const FIXED32_BIG = 3;
    /**
     * FIXED32_LITTLE uses little-endian encoding of the length as a 32 bit integer
     *
     * Generated from protobuf enum <code>FIXED32_LITTLE = 4;</code>
     */
    const FIXED32_LITTLE = 4;
    /**
     * FIXED64_BIG uses big-endian encoding of the length as a 64 bit integer
     *
     * Generated from protobuf enum <code>FIXED64_BIG = 5;</code>
     */
    const FIXED64_BIG = 5;
    /**
     * FIXED64_LITTLE uses little-endian encoding of the length as a 64 bit integer
     *
     * Generated from protobuf enum <code>FIXED64_LITTLE = 6;</code>
     */
    const FIXED64_LITTLE = 6;
    /**
     * REQUIRE_32_BYTES is like NONE, but will fail if the input is not exactly 32 bytes (sha256 output)
     *
     * Generated from protobuf enum <code>REQUIRE_32_BYTES = 7;</code>
     */
    const REQUIRE_32_BYTES = 7;
    /**
     * REQUIRE_64_BYTES is like NONE, but will fail if the input is not exactly 64 bytes (sha512 output)
     *
     * Generated from protobuf enum <code>REQUIRE_64_BYTES = 8;</code>
     */
    const REQUIRE_64_BYTES = 8;

    private static $valueToName = [
        self::NO_PREFIX => 'NO_PREFIX',
        self::VAR_PROTO => 'VAR_PROTO',
        self::VAR_RLP => 'VAR_RLP',
        self::FIXED32_BIG => 'FIXED32_BIG',
        self::FIXED32_LITTLE => 'FIXED32_LITTLE',
        self::FIXED64_BIG => 'FIXED64_BIG',
        self::FIXED64_LITTLE => 'FIXED64_LITTLE',
        self::REQUIRE_32_BYTES => 'REQUIRE_32_BYTES',
        self::REQUIRE_64_BYTES => 'REQUIRE_64_BYTES',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

