<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proofs.proto

namespace Ics23;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *CommitmentProof is either an ExistenceProof or a NonExistenceProof, or a Batch of such messages
 *
 * Generated from protobuf message <code>ics23.CommitmentProof</code>
 */
class CommitmentProof extends \Google\Protobuf\Internal\Message
{
    protected $proof;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Ics23\ExistenceProof $exist
     *     @type \Ics23\NonExistenceProof $nonexist
     *     @type \Ics23\BatchProof $batch
     *     @type \Ics23\CompressedBatchProof $compressed
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proofs::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.ics23.ExistenceProof exist = 1 [json_name = "exist"];</code>
     * @return \Ics23\ExistenceProof|null
     */
    public function getExist()
    {
        return $this->readOneof(1);
    }

    public function hasExist()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>.ics23.ExistenceProof exist = 1 [json_name = "exist"];</code>
     * @param \Ics23\ExistenceProof $var
     * @return $this
     */
    public function setExist($var)
    {
        GPBUtil::checkMessage($var, \Ics23\ExistenceProof::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.ics23.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
     * @return \Ics23\NonExistenceProof|null
     */
    public function getNonexist()
    {
        return $this->readOneof(2);
    }

    public function hasNonexist()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>.ics23.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
     * @param \Ics23\NonExistenceProof $var
     * @return $this
     */
    public function setNonexist($var)
    {
        GPBUtil::checkMessage($var, \Ics23\NonExistenceProof::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.ics23.BatchProof batch = 3 [json_name = "batch"];</code>
     * @return \Ics23\BatchProof|null
     */
    public function getBatch()
    {
        return $this->readOneof(3);
    }

    public function hasBatch()
    {
        return $this->hasOneof(3);
    }

    /**
     * Generated from protobuf field <code>.ics23.BatchProof batch = 3 [json_name = "batch"];</code>
     * @param \Ics23\BatchProof $var
     * @return $this
     */
    public function setBatch($var)
    {
        GPBUtil::checkMessage($var, \Ics23\BatchProof::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.ics23.CompressedBatchProof compressed = 4 [json_name = "compressed"];</code>
     * @return \Ics23\CompressedBatchProof|null
     */
    public function getCompressed()
    {
        return $this->readOneof(4);
    }

    public function hasCompressed()
    {
        return $this->hasOneof(4);
    }

    /**
     * Generated from protobuf field <code>.ics23.CompressedBatchProof compressed = 4 [json_name = "compressed"];</code>
     * @param \Ics23\CompressedBatchProof $var
     * @return $this
     */
    public function setCompressed($var)
    {
        GPBUtil::checkMessage($var, \Ics23\CompressedBatchProof::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getProof()
    {
        return $this->whichOneof("proof");
    }

}

