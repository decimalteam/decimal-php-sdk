<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proofs.proto

namespace Ics23;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *LeafOp represents the raw key-value data we wish to prove, and
 *must be flexible to represent the internal transformation from
 *the original key-value pairs into the basis hash, for many existing
 *merkle trees.
 *key and value are passed in. So that the signature of this operation is:
 * leafOp(key, value) -> output
 *To process this, first prehash the keys and values if needed (ANY means no hash in this case):
 * hkey = prehashKey(key)
 * hvalue = prehashValue(value)
 *Then combine the bytes, and hash it
 * output = hash(prefix || length(hkey) || hkey || length(hvalue) || hvalue)
 *
 * Generated from protobuf message <code>ics23.LeafOp</code>
 */
class LeafOp extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>.ics23.HashOp hash = 1 [json_name = "hash"];</code>
     */
    protected $hash = 0;
    /**
     * Generated from protobuf field <code>.ics23.HashOp prehash_key = 2 [json_name = "prehashKey"];</code>
     */
    protected $prehash_key = 0;
    /**
     * Generated from protobuf field <code>.ics23.HashOp prehash_value = 3 [json_name = "prehashValue"];</code>
     */
    protected $prehash_value = 0;
    /**
     * Generated from protobuf field <code>.ics23.LengthOp length = 4 [json_name = "length"];</code>
     */
    protected $length = 0;
    /**
     * prefix is a fixed bytes that may optionally be included at the beginning to differentiate
     * a leaf node from an inner node.
     *
     * Generated from protobuf field <code>bytes prefix = 5 [json_name = "prefix"];</code>
     */
    protected $prefix = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $hash
     *     @type int $prehash_key
     *     @type int $prehash_value
     *     @type int $length
     *     @type string $prefix
     *           prefix is a fixed bytes that may optionally be included at the beginning to differentiate
     *           a leaf node from an inner node.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proofs::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.ics23.HashOp hash = 1 [json_name = "hash"];</code>
     * @return int
     */
    public function getHash()
    {
        return $this->hash;
    }

    /**
     * Generated from protobuf field <code>.ics23.HashOp hash = 1 [json_name = "hash"];</code>
     * @param int $var
     * @return $this
     */
    public function setHash($var)
    {
        GPBUtil::checkEnum($var, \Ics23\HashOp::class);
        $this->hash = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.ics23.HashOp prehash_key = 2 [json_name = "prehashKey"];</code>
     * @return int
     */
    public function getPrehashKey()
    {
        return $this->prehash_key;
    }

    /**
     * Generated from protobuf field <code>.ics23.HashOp prehash_key = 2 [json_name = "prehashKey"];</code>
     * @param int $var
     * @return $this
     */
    public function setPrehashKey($var)
    {
        GPBUtil::checkEnum($var, \Ics23\HashOp::class);
        $this->prehash_key = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.ics23.HashOp prehash_value = 3 [json_name = "prehashValue"];</code>
     * @return int
     */
    public function getPrehashValue()
    {
        return $this->prehash_value;
    }

    /**
     * Generated from protobuf field <code>.ics23.HashOp prehash_value = 3 [json_name = "prehashValue"];</code>
     * @param int $var
     * @return $this
     */
    public function setPrehashValue($var)
    {
        GPBUtil::checkEnum($var, \Ics23\HashOp::class);
        $this->prehash_value = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.ics23.LengthOp length = 4 [json_name = "length"];</code>
     * @return int
     */
    public function getLength()
    {
        return $this->length;
    }

    /**
     * Generated from protobuf field <code>.ics23.LengthOp length = 4 [json_name = "length"];</code>
     * @param int $var
     * @return $this
     */
    public function setLength($var)
    {
        GPBUtil::checkEnum($var, \Ics23\LengthOp::class);
        $this->length = $var;

        return $this;
    }

    /**
     * prefix is a fixed bytes that may optionally be included at the beginning to differentiate
     * a leaf node from an inner node.
     *
     * Generated from protobuf field <code>bytes prefix = 5 [json_name = "prefix"];</code>
     * @return string
     */
    public function getPrefix()
    {
        return $this->prefix;
    }

    /**
     * prefix is a fixed bytes that may optionally be included at the beginning to differentiate
     * a leaf node from an inner node.
     *
     * Generated from protobuf field <code>bytes prefix = 5 [json_name = "prefix"];</code>
     * @param string $var
     * @return $this
     */
    public function setPrefix($var)
    {
        GPBUtil::checkString($var, False);
        $this->prefix = $var;

        return $this;
    }

}

