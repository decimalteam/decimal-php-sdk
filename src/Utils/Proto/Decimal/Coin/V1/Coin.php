<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: decimal/coin/v1/coin.proto

namespace Decimal\Coin\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Coin defines the coin.
 *
 * Generated from protobuf message <code>decimal.coin.v1.Coin</code>
 */
class Coin extends \Google\Protobuf\Internal\Message
{
    /**
     * denom defines the coin denomination.
     *
     * Generated from protobuf field <code>string denom = 1 [json_name = "denom"];</code>
     */
    protected $denom = '';
    /**
     * title defines the coin title.
     *
     * Generated from protobuf field <code>string title = 2 [json_name = "title"];</code>
     */
    protected $title = '';
    /**
     * creator defines the address of the account created the coin.
     *
     * Generated from protobuf field <code>string creator = 3 [json_name = "creator", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     */
    protected $creator = '';
    /**
     * crr defines the coin constant reserve ratio determining coin tokenomics.
     *
     * Generated from protobuf field <code>uint32 crr = 4 [json_name = "crr", (.gogoproto.customname) = "CRR"];</code>
     */
    protected $crr = 0;
    /**
     * limit_volume defines maximum allowed supply for the coin.
     *
     * Generated from protobuf field <code>string limit_volume = 5 [json_name = "limitVolume", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];</code>
     */
    protected $limit_volume = '';
    /**
     * identity is a string containing any other information related to the coin.
     *
     * Generated from protobuf field <code>string identity = 6 [json_name = "identity"];</code>
     */
    protected $identity = '';
    /**
     * volume defines the coin supply.
     * NOTE: actual values are stored as CoinVR records in KVStore.
     *
     * Generated from protobuf field <code>string volume = 7 [json_name = "volume", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];</code>
     */
    protected $volume = '';
    /**
     * reserve defines the coin reserve in base coin.
     * NOTE: actual values are stored as CoinVR records in KVStore.
     *
     * Generated from protobuf field <code>string reserve = 8 [json_name = "reserve", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];</code>
     */
    protected $reserve = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $denom
     *           denom defines the coin denomination.
     *     @type string $title
     *           title defines the coin title.
     *     @type string $creator
     *           creator defines the address of the account created the coin.
     *     @type int $crr
     *           crr defines the coin constant reserve ratio determining coin tokenomics.
     *     @type string $limit_volume
     *           limit_volume defines maximum allowed supply for the coin.
     *     @type string $identity
     *           identity is a string containing any other information related to the coin.
     *     @type string $volume
     *           volume defines the coin supply.
     *           NOTE: actual values are stored as CoinVR records in KVStore.
     *     @type string $reserve
     *           reserve defines the coin reserve in base coin.
     *           NOTE: actual values are stored as CoinVR records in KVStore.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Decimal\Coin\V1\Coin::initOnce();
        parent::__construct($data);
    }

    /**
     * denom defines the coin denomination.
     *
     * Generated from protobuf field <code>string denom = 1 [json_name = "denom"];</code>
     * @return string
     */
    public function getDenom()
    {
        return $this->denom;
    }

    /**
     * denom defines the coin denomination.
     *
     * Generated from protobuf field <code>string denom = 1 [json_name = "denom"];</code>
     * @param string $var
     * @return $this
     */
    public function setDenom($var)
    {
        GPBUtil::checkString($var, True);
        $this->denom = $var;

        return $this;
    }

    /**
     * title defines the coin title.
     *
     * Generated from protobuf field <code>string title = 2 [json_name = "title"];</code>
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * title defines the coin title.
     *
     * Generated from protobuf field <code>string title = 2 [json_name = "title"];</code>
     * @param string $var
     * @return $this
     */
    public function setTitle($var)
    {
        GPBUtil::checkString($var, True);
        $this->title = $var;

        return $this;
    }

    /**
     * creator defines the address of the account created the coin.
     *
     * Generated from protobuf field <code>string creator = 3 [json_name = "creator", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     * @return string
     */
    public function getCreator()
    {
        return $this->creator;
    }

    /**
     * creator defines the address of the account created the coin.
     *
     * Generated from protobuf field <code>string creator = 3 [json_name = "creator", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     * @param string $var
     * @return $this
     */
    public function setCreator($var)
    {
        GPBUtil::checkString($var, True);
        $this->creator = $var;

        return $this;
    }

    /**
     * crr defines the coin constant reserve ratio determining coin tokenomics.
     *
     * Generated from protobuf field <code>uint32 crr = 4 [json_name = "crr", (.gogoproto.customname) = "CRR"];</code>
     * @return int
     */
    public function getCrr()
    {
        return $this->crr;
    }

    /**
     * crr defines the coin constant reserve ratio determining coin tokenomics.
     *
     * Generated from protobuf field <code>uint32 crr = 4 [json_name = "crr", (.gogoproto.customname) = "CRR"];</code>
     * @param int $var
     * @return $this
     */
    public function setCrr($var)
    {
        GPBUtil::checkUint32($var);
        $this->crr = $var;

        return $this;
    }

    /**
     * limit_volume defines maximum allowed supply for the coin.
     *
     * Generated from protobuf field <code>string limit_volume = 5 [json_name = "limitVolume", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];</code>
     * @return string
     */
    public function getLimitVolume()
    {
        return $this->limit_volume;
    }

    /**
     * limit_volume defines maximum allowed supply for the coin.
     *
     * Generated from protobuf field <code>string limit_volume = 5 [json_name = "limitVolume", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];</code>
     * @param string $var
     * @return $this
     */
    public function setLimitVolume($var)
    {
        GPBUtil::checkString($var, True);
        $this->limit_volume = $var;

        return $this;
    }

    /**
     * identity is a string containing any other information related to the coin.
     *
     * Generated from protobuf field <code>string identity = 6 [json_name = "identity"];</code>
     * @return string
     */
    public function getIdentity()
    {
        return $this->identity;
    }

    /**
     * identity is a string containing any other information related to the coin.
     *
     * Generated from protobuf field <code>string identity = 6 [json_name = "identity"];</code>
     * @param string $var
     * @return $this
     */
    public function setIdentity($var)
    {
        GPBUtil::checkString($var, True);
        $this->identity = $var;

        return $this;
    }

    /**
     * volume defines the coin supply.
     * NOTE: actual values are stored as CoinVR records in KVStore.
     *
     * Generated from protobuf field <code>string volume = 7 [json_name = "volume", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];</code>
     * @return string
     */
    public function getVolume()
    {
        return $this->volume;
    }

    /**
     * volume defines the coin supply.
     * NOTE: actual values are stored as CoinVR records in KVStore.
     *
     * Generated from protobuf field <code>string volume = 7 [json_name = "volume", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];</code>
     * @param string $var
     * @return $this
     */
    public function setVolume($var)
    {
        GPBUtil::checkString($var, True);
        $this->volume = $var;

        return $this;
    }

    /**
     * reserve defines the coin reserve in base coin.
     * NOTE: actual values are stored as CoinVR records in KVStore.
     *
     * Generated from protobuf field <code>string reserve = 8 [json_name = "reserve", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];</code>
     * @return string
     */
    public function getReserve()
    {
        return $this->reserve;
    }

    /**
     * reserve defines the coin reserve in base coin.
     * NOTE: actual values are stored as CoinVR records in KVStore.
     *
     * Generated from protobuf field <code>string reserve = 8 [json_name = "reserve", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];</code>
     * @param string $var
     * @return $this
     */
    public function setReserve($var)
    {
        GPBUtil::checkString($var, True);
        $this->reserve = $var;

        return $this;
    }

}

