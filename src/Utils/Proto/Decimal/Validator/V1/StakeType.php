<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: decimal/validator/v1/validator.proto

namespace Decimal\Validator\V1;

use UnexpectedValueException;

/**
 * StakeType is the type of a delegation stake.
 *
 * Protobuf type <code>decimal.validator.v1.StakeType</code>
 */
class StakeType
{
    /**
     * UNSPECIFIED defines an invalid stake type.
     *
     * Generated from protobuf enum <code>STAKE_TYPE_UNSPECIFIED = 0 [(.gogoproto.enumvalue_customname) = "Unspecified"];</code>
     */
    const STAKE_TYPE_UNSPECIFIED = 0;
    /**
     * COIN defines the type for stakes in coin.
     *
     * Generated from protobuf enum <code>STAKE_TYPE_COIN = 1 [(.gogoproto.enumvalue_customname) = "Coin"];</code>
     */
    const STAKE_TYPE_COIN = 1;
    /**
     * NFT defines the type for stakes in NFT.
     *
     * Generated from protobuf enum <code>STAKE_TYPE_NFT = 2 [(.gogoproto.enumvalue_customname) = "NFT"];</code>
     */
    const STAKE_TYPE_NFT = 2;

    private static $valueToName = [
        self::STAKE_TYPE_UNSPECIFIED => 'STAKE_TYPE_UNSPECIFIED',
        self::STAKE_TYPE_COIN => 'STAKE_TYPE_COIN',
        self::STAKE_TYPE_NFT => 'STAKE_TYPE_NFT',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

