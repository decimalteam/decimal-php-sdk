<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: decimal/validator/v1/validator.proto

namespace Decimal\Validator\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Stake contains all necessary info about a delegation stake.
 *
 * Generated from protobuf message <code>decimal.validator.v1.Stake</code>
 */
class Stake extends \Google\Protobuf\Internal\Message
{
    /**
     * type defines type of the stake.
     *
     * Generated from protobuf field <code>.decimal.validator.v1.StakeType type = 1 [json_name = "type"];</code>
     */
    protected $type = 0;
    /**
     * id defines the stake ID.
     * For stake in Coin: contains coin denom value.
     * For stake in NFT: contains NFT token ID value.
     *
     * Generated from protobuf field <code>string id = 2 [json_name = "id", (.gogoproto.customname) = "ID"];</code>
     */
    protected $id = '';
    /**
     * stake defines amount of the coin delegated.
     * For stake in Coin: contains actually delegated coin.
     * For stake in NFT: contains total reserve of delegated NFT sub-tokens.
     *
     * Generated from protobuf field <code>.cosmos.base.v1beta1.Coin stake = 3 [json_name = "stake", (.gogoproto.nullable) = false];</code>
     */
    protected $stake = null;
    /**
     * sub_token_ids defines list of NFT sub-token IDs.
     *
     * Generated from protobuf field <code>repeated uint32 sub_token_ids = 4 [json_name = "subTokenIds", (.gogoproto.customname) = "SubTokenIDs"];</code>
     */
    private $sub_token_ids;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $type
     *           type defines type of the stake.
     *     @type string $id
     *           id defines the stake ID.
     *           For stake in Coin: contains coin denom value.
     *           For stake in NFT: contains NFT token ID value.
     *     @type \Cosmos\Base\V1beta1\Coin $stake
     *           stake defines amount of the coin delegated.
     *           For stake in Coin: contains actually delegated coin.
     *           For stake in NFT: contains total reserve of delegated NFT sub-tokens.
     *     @type array<int>|\Google\Protobuf\Internal\RepeatedField $sub_token_ids
     *           sub_token_ids defines list of NFT sub-token IDs.
     * }
     */
    public function __construct($data = NULL) {
        \Decimal\Validator\V1\GPBMetadata\Validator::initOnce();
        parent::__construct($data);
    }

    /**
     * type defines type of the stake.
     *
     * Generated from protobuf field <code>.decimal.validator.v1.StakeType type = 1 [json_name = "type"];</code>
     * @return int
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * type defines type of the stake.
     *
     * Generated from protobuf field <code>.decimal.validator.v1.StakeType type = 1 [json_name = "type"];</code>
     * @param int $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkEnum($var, \Decimal\Validator\V1\StakeType::class);
        $this->type = $var;

        return $this;
    }

    /**
     * id defines the stake ID.
     * For stake in Coin: contains coin denom value.
     * For stake in NFT: contains NFT token ID value.
     *
     * Generated from protobuf field <code>string id = 2 [json_name = "id", (.gogoproto.customname) = "ID"];</code>
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * id defines the stake ID.
     * For stake in Coin: contains coin denom value.
     * For stake in NFT: contains NFT token ID value.
     *
     * Generated from protobuf field <code>string id = 2 [json_name = "id", (.gogoproto.customname) = "ID"];</code>
     * @param string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkString($var, True);
        $this->id = $var;

        return $this;
    }

    /**
     * stake defines amount of the coin delegated.
     * For stake in Coin: contains actually delegated coin.
     * For stake in NFT: contains total reserve of delegated NFT sub-tokens.
     *
     * Generated from protobuf field <code>.cosmos.base.v1beta1.Coin stake = 3 [json_name = "stake", (.gogoproto.nullable) = false];</code>
     * @return \Cosmos\Base\V1beta1\Coin|null
     */
    public function getStake()
    {
        return $this->stake;
    }

    public function hasStake()
    {
        return isset($this->stake);
    }

    public function clearStake()
    {
        unset($this->stake);
    }

    /**
     * stake defines amount of the coin delegated.
     * For stake in Coin: contains actually delegated coin.
     * For stake in NFT: contains total reserve of delegated NFT sub-tokens.
     *
     * Generated from protobuf field <code>.cosmos.base.v1beta1.Coin stake = 3 [json_name = "stake", (.gogoproto.nullable) = false];</code>
     * @param \Cosmos\Base\V1beta1\Coin $var
     * @return $this
     */
    public function setStake($var)
    {
        GPBUtil::checkMessage($var, \Cosmos\Base\V1beta1\Coin::class);
        $this->stake = $var;

        return $this;
    }

    /**
     * sub_token_ids defines list of NFT sub-token IDs.
     *
     * Generated from protobuf field <code>repeated uint32 sub_token_ids = 4 [json_name = "subTokenIds", (.gogoproto.customname) = "SubTokenIDs"];</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getSubTokenIds()
    {
        return $this->sub_token_ids;
    }

    /**
     * sub_token_ids defines list of NFT sub-token IDs.
     *
     * Generated from protobuf field <code>repeated uint32 sub_token_ids = 4 [json_name = "subTokenIds", (.gogoproto.customname) = "SubTokenIDs"];</code>
     * @param array<int>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setSubTokenIds($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::UINT32);
        $this->sub_token_ids = $arr;

        return $this;
    }

}

