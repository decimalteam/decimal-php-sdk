<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: decimal/swap/v1/swap.proto

namespace Decimal\Swap\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Swap defines a cross-chain swap.
 *
 * Generated from protobuf message <code>decimal.swap.v1.Swap</code>
 */
class Swap extends \Google\Protobuf\Internal\Message
{
    /**
     * hashed_secret defines the hash of secret used during cross-chain swap.
     *
     * Generated from protobuf field <code>string hashed_secret = 1 [json_name = "hashedSecret", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "Hash"];</code>
     */
    protected $hashed_secret = '';
    /**
     * from defines address used to initialize swap.
     *
     * Generated from protobuf field <code>string from = 2 [json_name = "from"];</code>
     */
    protected $from = '';
    /**
     * recipient defines address of the recipient swapped coins.
     *
     * Generated from protobuf field <code>string recipient = 3 [json_name = "recipient"];</code>
     */
    protected $recipient = '';
    /**
     * amount defines amount of coins the swap initialized.
     *
     * Generated from protobuf field <code>string amount = 4 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];</code>
     */
    protected $amount = '';
    /**
     * timestamp defines time moment when the swap was initialized.
     *
     * Generated from protobuf field <code>uint64 timestamp = 5 [json_name = "timestamp"];</code>
     */
    protected $timestamp = 0;
    /**
     * redeemed defines if the swap was redeemed.
     *
     * Generated from protobuf field <code>bool redeemed = 6 [json_name = "redeemed"];</code>
     */
    protected $redeemed = false;
    /**
     * refunded defines if the swap was refunded.
     *
     * Generated from protobuf field <code>bool refunded = 7 [json_name = "refunded"];</code>
     */
    protected $refunded = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $hashed_secret
     *           hashed_secret defines the hash of secret used during cross-chain swap.
     *     @type string $from
     *           from defines address used to initialize swap.
     *     @type string $recipient
     *           recipient defines address of the recipient swapped coins.
     *     @type string $amount
     *           amount defines amount of coins the swap initialized.
     *     @type int|string $timestamp
     *           timestamp defines time moment when the swap was initialized.
     *     @type bool $redeemed
     *           redeemed defines if the swap was redeemed.
     *     @type bool $refunded
     *           refunded defines if the swap was refunded.
     * }
     */
    public function __construct($data = NULL) {
        \Decimal\Swap\V1\GPBMetadata\Swap::initOnce();
        parent::__construct($data);
    }

    /**
     * hashed_secret defines the hash of secret used during cross-chain swap.
     *
     * Generated from protobuf field <code>string hashed_secret = 1 [json_name = "hashedSecret", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "Hash"];</code>
     * @return string
     */
    public function getHashedSecret()
    {
        return $this->hashed_secret;
    }

    /**
     * hashed_secret defines the hash of secret used during cross-chain swap.
     *
     * Generated from protobuf field <code>string hashed_secret = 1 [json_name = "hashedSecret", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "Hash"];</code>
     * @param string $var
     * @return $this
     */
    public function setHashedSecret($var)
    {
        GPBUtil::checkString($var, True);
        $this->hashed_secret = $var;

        return $this;
    }

    /**
     * from defines address used to initialize swap.
     *
     * Generated from protobuf field <code>string from = 2 [json_name = "from"];</code>
     * @return string
     */
    public function getFrom()
    {
        return $this->from;
    }

    /**
     * from defines address used to initialize swap.
     *
     * Generated from protobuf field <code>string from = 2 [json_name = "from"];</code>
     * @param string $var
     * @return $this
     */
    public function setFrom($var)
    {
        GPBUtil::checkString($var, True);
        $this->from = $var;

        return $this;
    }

    /**
     * recipient defines address of the recipient swapped coins.
     *
     * Generated from protobuf field <code>string recipient = 3 [json_name = "recipient"];</code>
     * @return string
     */
    public function getRecipient()
    {
        return $this->recipient;
    }

    /**
     * recipient defines address of the recipient swapped coins.
     *
     * Generated from protobuf field <code>string recipient = 3 [json_name = "recipient"];</code>
     * @param string $var
     * @return $this
     */
    public function setRecipient($var)
    {
        GPBUtil::checkString($var, True);
        $this->recipient = $var;

        return $this;
    }

    /**
     * amount defines amount of coins the swap initialized.
     *
     * Generated from protobuf field <code>string amount = 4 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];</code>
     * @return string
     */
    public function getAmount()
    {
        return $this->amount;
    }

    /**
     * amount defines amount of coins the swap initialized.
     *
     * Generated from protobuf field <code>string amount = 4 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];</code>
     * @param string $var
     * @return $this
     */
    public function setAmount($var)
    {
        GPBUtil::checkString($var, True);
        $this->amount = $var;

        return $this;
    }

    /**
     * timestamp defines time moment when the swap was initialized.
     *
     * Generated from protobuf field <code>uint64 timestamp = 5 [json_name = "timestamp"];</code>
     * @return int|string
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }

    /**
     * timestamp defines time moment when the swap was initialized.
     *
     * Generated from protobuf field <code>uint64 timestamp = 5 [json_name = "timestamp"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setTimestamp($var)
    {
        GPBUtil::checkUint64($var);
        $this->timestamp = $var;

        return $this;
    }

    /**
     * redeemed defines if the swap was redeemed.
     *
     * Generated from protobuf field <code>bool redeemed = 6 [json_name = "redeemed"];</code>
     * @return bool
     */
    public function getRedeemed()
    {
        return $this->redeemed;
    }

    /**
     * redeemed defines if the swap was redeemed.
     *
     * Generated from protobuf field <code>bool redeemed = 6 [json_name = "redeemed"];</code>
     * @param bool $var
     * @return $this
     */
    public function setRedeemed($var)
    {
        GPBUtil::checkBool($var);
        $this->redeemed = $var;

        return $this;
    }

    /**
     * refunded defines if the swap was refunded.
     *
     * Generated from protobuf field <code>bool refunded = 7 [json_name = "refunded"];</code>
     * @return bool
     */
    public function getRefunded()
    {
        return $this->refunded;
    }

    /**
     * refunded defines if the swap was refunded.
     *
     * Generated from protobuf field <code>bool refunded = 7 [json_name = "refunded"];</code>
     * @param bool $var
     * @return $this
     */
    public function setRefunded($var)
    {
        GPBUtil::checkBool($var);
        $this->refunded = $var;

        return $this;
    }

}

