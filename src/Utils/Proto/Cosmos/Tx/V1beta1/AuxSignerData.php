<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: cosmos/tx/v1beta1/tx.proto

namespace Cosmos\Tx\V1beta1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * AuxSignerData is the intermediary format that an auxiliary signer (e.g. a
 * tipper) builds and sends to the fee payer (who will build and broadcast the
 * actual tx). AuxSignerData is not a valid tx in itself, and will be rejected
 * by the node if sent directly as-is.
 * Since: cosmos-sdk 0.46
 *
 * Generated from protobuf message <code>cosmos.tx.v1beta1.AuxSignerData</code>
 */
class AuxSignerData extends \Google\Protobuf\Internal\Message
{
    /**
     * address is the bech32-encoded address of the auxiliary signer. If using
     * AuxSignerData across different chains, the bech32 prefix of the target
     * chain (where the final transaction is broadcasted) should be used.
     *
     * Generated from protobuf field <code>string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     */
    protected $address = '';
    /**
     * sign_doc is the SIGN_MODE_DIRECT_AUX sign doc that the auxiliary signer
     * signs. Note: we use the same sign doc even if we're signing with
     * LEGACY_AMINO_JSON.
     *
     * Generated from protobuf field <code>.cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2 [json_name = "signDoc"];</code>
     */
    protected $sign_doc = null;
    /**
     * mode is the signing mode of the single signer.
     *
     * Generated from protobuf field <code>.cosmos.tx.signing.v1beta1.SignMode mode = 3 [json_name = "mode"];</code>
     */
    protected $mode = 0;
    /**
     * sig is the signature of the sign doc.
     *
     * Generated from protobuf field <code>bytes sig = 4 [json_name = "sig"];</code>
     */
    protected $sig = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $address
     *           address is the bech32-encoded address of the auxiliary signer. If using
     *           AuxSignerData across different chains, the bech32 prefix of the target
     *           chain (where the final transaction is broadcasted) should be used.
     *     @type \Cosmos\Tx\V1beta1\SignDocDirectAux $sign_doc
     *           sign_doc is the SIGN_MODE_DIRECT_AUX sign doc that the auxiliary signer
     *           signs. Note: we use the same sign doc even if we're signing with
     *           LEGACY_AMINO_JSON.
     *     @type int $mode
     *           mode is the signing mode of the single signer.
     *     @type string $sig
     *           sig is the signature of the sign doc.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Cosmos\Tx\V1Beta1\Tx::initOnce();
        parent::__construct($data);
    }

    /**
     * address is the bech32-encoded address of the auxiliary signer. If using
     * AuxSignerData across different chains, the bech32 prefix of the target
     * chain (where the final transaction is broadcasted) should be used.
     *
     * Generated from protobuf field <code>string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     * @return string
     */
    public function getAddress()
    {
        return $this->address;
    }

    /**
     * address is the bech32-encoded address of the auxiliary signer. If using
     * AuxSignerData across different chains, the bech32 prefix of the target
     * chain (where the final transaction is broadcasted) should be used.
     *
     * Generated from protobuf field <code>string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     * @param string $var
     * @return $this
     */
    public function setAddress($var)
    {
        GPBUtil::checkString($var, True);
        $this->address = $var;

        return $this;
    }

    /**
     * sign_doc is the SIGN_MODE_DIRECT_AUX sign doc that the auxiliary signer
     * signs. Note: we use the same sign doc even if we're signing with
     * LEGACY_AMINO_JSON.
     *
     * Generated from protobuf field <code>.cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2 [json_name = "signDoc"];</code>
     * @return \Cosmos\Tx\V1beta1\SignDocDirectAux|null
     */
    public function getSignDoc()
    {
        return $this->sign_doc;
    }

    public function hasSignDoc()
    {
        return isset($this->sign_doc);
    }

    public function clearSignDoc()
    {
        unset($this->sign_doc);
    }

    /**
     * sign_doc is the SIGN_MODE_DIRECT_AUX sign doc that the auxiliary signer
     * signs. Note: we use the same sign doc even if we're signing with
     * LEGACY_AMINO_JSON.
     *
     * Generated from protobuf field <code>.cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2 [json_name = "signDoc"];</code>
     * @param \Cosmos\Tx\V1beta1\SignDocDirectAux $var
     * @return $this
     */
    public function setSignDoc($var)
    {
        GPBUtil::checkMessage($var, \Cosmos\Tx\V1beta1\SignDocDirectAux::class);
        $this->sign_doc = $var;

        return $this;
    }

    /**
     * mode is the signing mode of the single signer.
     *
     * Generated from protobuf field <code>.cosmos.tx.signing.v1beta1.SignMode mode = 3 [json_name = "mode"];</code>
     * @return int
     */
    public function getMode()
    {
        return $this->mode;
    }

    /**
     * mode is the signing mode of the single signer.
     *
     * Generated from protobuf field <code>.cosmos.tx.signing.v1beta1.SignMode mode = 3 [json_name = "mode"];</code>
     * @param int $var
     * @return $this
     */
    public function setMode($var)
    {
        GPBUtil::checkEnum($var, \Cosmos\Tx\Signing\V1beta1\SignMode::class);
        $this->mode = $var;

        return $this;
    }

    /**
     * sig is the signature of the sign doc.
     *
     * Generated from protobuf field <code>bytes sig = 4 [json_name = "sig"];</code>
     * @return string
     */
    public function getSig()
    {
        return $this->sig;
    }

    /**
     * sig is the signature of the sign doc.
     *
     * Generated from protobuf field <code>bytes sig = 4 [json_name = "sig"];</code>
     * @param string $var
     * @return $this
     */
    public function setSig($var)
    {
        GPBUtil::checkString($var, False);
        $this->sig = $var;

        return $this;
    }

}

