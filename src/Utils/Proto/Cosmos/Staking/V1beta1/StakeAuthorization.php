<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: cosmos/staking/v1beta1/authz.proto

namespace Cosmos\Staking\V1beta1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * StakeAuthorization defines authorization for delegate/undelegate/redelegate.
 *
 * Generated from protobuf message <code>cosmos.staking.v1beta1.StakeAuthorization</code>
 */
class StakeAuthorization extends \Google\Protobuf\Internal\Message
{
    /**
     * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
     * empty, there is no spend limit and any amount of coins can be delegated.
     *
     * Generated from protobuf field <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
     */
    protected $max_tokens = null;
    /**
     * authorization_type defines one of AuthorizationType.
     *
     * Generated from protobuf field <code>.cosmos.staking.v1beta1.AuthorizationType authorization_type = 4 [json_name = "authorizationType"];</code>
     */
    protected $authorization_type = 0;
    protected $validators;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Cosmos\Base\V1beta1\Coin $max_tokens
     *           max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
     *           empty, there is no spend limit and any amount of coins can be delegated.
     *     @type \Cosmos\Staking\V1beta1\StakeAuthorization\Validators $allow_list
     *           allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
     *           account.
     *     @type \Cosmos\Staking\V1beta1\StakeAuthorization\Validators $deny_list
     *           deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
     *     @type int $authorization_type
     *           authorization_type defines one of AuthorizationType.
     * }
     */
    public function __construct($data = NULL) {
        \Cosmos\Staking\V1beta1\GPBMetadata\Authz::initOnce();
        parent::__construct($data);
    }

    /**
     * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
     * empty, there is no spend limit and any amount of coins can be delegated.
     *
     * Generated from protobuf field <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
     * @return \Cosmos\Base\V1beta1\Coin|null
     */
    public function getMaxTokens()
    {
        return $this->max_tokens;
    }

    public function hasMaxTokens()
    {
        return isset($this->max_tokens);
    }

    public function clearMaxTokens()
    {
        unset($this->max_tokens);
    }

    /**
     * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
     * empty, there is no spend limit and any amount of coins can be delegated.
     *
     * Generated from protobuf field <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
     * @param \Cosmos\Base\V1beta1\Coin $var
     * @return $this
     */
    public function setMaxTokens($var)
    {
        GPBUtil::checkMessage($var, \Cosmos\Base\V1beta1\Coin::class);
        $this->max_tokens = $var;

        return $this;
    }

    /**
     * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
     * account.
     *
     * Generated from protobuf field <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2 [json_name = "allowList"];</code>
     * @return \Cosmos\Staking\V1beta1\StakeAuthorization\Validators|null
     */
    public function getAllowList()
    {
        return $this->readOneof(2);
    }

    public function hasAllowList()
    {
        return $this->hasOneof(2);
    }

    /**
     * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
     * account.
     *
     * Generated from protobuf field <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2 [json_name = "allowList"];</code>
     * @param \Cosmos\Staking\V1beta1\StakeAuthorization\Validators $var
     * @return $this
     */
    public function setAllowList($var)
    {
        GPBUtil::checkMessage($var, \Cosmos\Staking\V1beta1\StakeAuthorization\Validators::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
     *
     * Generated from protobuf field <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3 [json_name = "denyList"];</code>
     * @return \Cosmos\Staking\V1beta1\StakeAuthorization\Validators|null
     */
    public function getDenyList()
    {
        return $this->readOneof(3);
    }

    public function hasDenyList()
    {
        return $this->hasOneof(3);
    }

    /**
     * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
     *
     * Generated from protobuf field <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3 [json_name = "denyList"];</code>
     * @param \Cosmos\Staking\V1beta1\StakeAuthorization\Validators $var
     * @return $this
     */
    public function setDenyList($var)
    {
        GPBUtil::checkMessage($var, \Cosmos\Staking\V1beta1\StakeAuthorization\Validators::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * authorization_type defines one of AuthorizationType.
     *
     * Generated from protobuf field <code>.cosmos.staking.v1beta1.AuthorizationType authorization_type = 4 [json_name = "authorizationType"];</code>
     * @return int
     */
    public function getAuthorizationType()
    {
        return $this->authorization_type;
    }

    /**
     * authorization_type defines one of AuthorizationType.
     *
     * Generated from protobuf field <code>.cosmos.staking.v1beta1.AuthorizationType authorization_type = 4 [json_name = "authorizationType"];</code>
     * @param int $var
     * @return $this
     */
    public function setAuthorizationType($var)
    {
        GPBUtil::checkEnum($var, \Cosmos\Staking\V1beta1\AuthorizationType::class);
        $this->authorization_type = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getValidators()
    {
        return $this->whichOneof("validators");
    }

}

