<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: cosmos/slashing/v1beta1/slashing.proto

namespace Cosmos\Slashing\V1beta1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * ValidatorSigningInfo defines a validator's signing info for monitoring their
 * liveness activity.
 *
 * Generated from protobuf message <code>cosmos.slashing.v1beta1.ValidatorSigningInfo</code>
 */
class ValidatorSigningInfo extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     */
    protected $address = '';
    /**
     * Height at which validator was first a candidate OR was unjailed
     *
     * Generated from protobuf field <code>int64 start_height = 2 [json_name = "startHeight"];</code>
     */
    protected $start_height = 0;
    /**
     * Index which is incremented each time the validator was a bonded
     * in a block and may have signed a precommit or not. This in conjunction with the
     * `SignedBlocksWindow` param determines the index in the `MissedBlocksBitArray`.
     *
     * Generated from protobuf field <code>int64 index_offset = 3 [json_name = "indexOffset"];</code>
     */
    protected $index_offset = 0;
    /**
     * Timestamp until which the validator is jailed due to liveness downtime.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp jailed_until = 4 [json_name = "jailedUntil", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];</code>
     */
    protected $jailed_until = null;
    /**
     * Whether or not a validator has been tombstoned (killed out of validator set). It is set
     * once the validator commits an equivocation or for any other configured misbehiavor.
     *
     * Generated from protobuf field <code>bool tombstoned = 5 [json_name = "tombstoned"];</code>
     */
    protected $tombstoned = false;
    /**
     * A counter kept to avoid unnecessary array reads.
     * Note that `Sum(MissedBlocksBitArray)` always equals `MissedBlocksCounter`.
     *
     * Generated from protobuf field <code>int64 missed_blocks_counter = 6 [json_name = "missedBlocksCounter"];</code>
     */
    protected $missed_blocks_counter = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $address
     *     @type int|string $start_height
     *           Height at which validator was first a candidate OR was unjailed
     *     @type int|string $index_offset
     *           Index which is incremented each time the validator was a bonded
     *           in a block and may have signed a precommit or not. This in conjunction with the
     *           `SignedBlocksWindow` param determines the index in the `MissedBlocksBitArray`.
     *     @type \Google\Protobuf\Timestamp $jailed_until
     *           Timestamp until which the validator is jailed due to liveness downtime.
     *     @type bool $tombstoned
     *           Whether or not a validator has been tombstoned (killed out of validator set). It is set
     *           once the validator commits an equivocation or for any other configured misbehiavor.
     *     @type int|string $missed_blocks_counter
     *           A counter kept to avoid unnecessary array reads.
     *           Note that `Sum(MissedBlocksBitArray)` always equals `MissedBlocksCounter`.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Cosmos\Slashing\V1Beta1\Slashing::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     * @return string
     */
    public function getAddress()
    {
        return $this->address;
    }

    /**
     * Generated from protobuf field <code>string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     * @param string $var
     * @return $this
     */
    public function setAddress($var)
    {
        GPBUtil::checkString($var, True);
        $this->address = $var;

        return $this;
    }

    /**
     * Height at which validator was first a candidate OR was unjailed
     *
     * Generated from protobuf field <code>int64 start_height = 2 [json_name = "startHeight"];</code>
     * @return int|string
     */
    public function getStartHeight()
    {
        return $this->start_height;
    }

    /**
     * Height at which validator was first a candidate OR was unjailed
     *
     * Generated from protobuf field <code>int64 start_height = 2 [json_name = "startHeight"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setStartHeight($var)
    {
        GPBUtil::checkInt64($var);
        $this->start_height = $var;

        return $this;
    }

    /**
     * Index which is incremented each time the validator was a bonded
     * in a block and may have signed a precommit or not. This in conjunction with the
     * `SignedBlocksWindow` param determines the index in the `MissedBlocksBitArray`.
     *
     * Generated from protobuf field <code>int64 index_offset = 3 [json_name = "indexOffset"];</code>
     * @return int|string
     */
    public function getIndexOffset()
    {
        return $this->index_offset;
    }

    /**
     * Index which is incremented each time the validator was a bonded
     * in a block and may have signed a precommit or not. This in conjunction with the
     * `SignedBlocksWindow` param determines the index in the `MissedBlocksBitArray`.
     *
     * Generated from protobuf field <code>int64 index_offset = 3 [json_name = "indexOffset"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setIndexOffset($var)
    {
        GPBUtil::checkInt64($var);
        $this->index_offset = $var;

        return $this;
    }

    /**
     * Timestamp until which the validator is jailed due to liveness downtime.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp jailed_until = 4 [json_name = "jailedUntil", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getJailedUntil()
    {
        return $this->jailed_until;
    }

    public function hasJailedUntil()
    {
        return isset($this->jailed_until);
    }

    public function clearJailedUntil()
    {
        unset($this->jailed_until);
    }

    /**
     * Timestamp until which the validator is jailed due to liveness downtime.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp jailed_until = 4 [json_name = "jailedUntil", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setJailedUntil($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->jailed_until = $var;

        return $this;
    }

    /**
     * Whether or not a validator has been tombstoned (killed out of validator set). It is set
     * once the validator commits an equivocation or for any other configured misbehiavor.
     *
     * Generated from protobuf field <code>bool tombstoned = 5 [json_name = "tombstoned"];</code>
     * @return bool
     */
    public function getTombstoned()
    {
        return $this->tombstoned;
    }

    /**
     * Whether or not a validator has been tombstoned (killed out of validator set). It is set
     * once the validator commits an equivocation or for any other configured misbehiavor.
     *
     * Generated from protobuf field <code>bool tombstoned = 5 [json_name = "tombstoned"];</code>
     * @param bool $var
     * @return $this
     */
    public function setTombstoned($var)
    {
        GPBUtil::checkBool($var);
        $this->tombstoned = $var;

        return $this;
    }

    /**
     * A counter kept to avoid unnecessary array reads.
     * Note that `Sum(MissedBlocksBitArray)` always equals `MissedBlocksCounter`.
     *
     * Generated from protobuf field <code>int64 missed_blocks_counter = 6 [json_name = "missedBlocksCounter"];</code>
     * @return int|string
     */
    public function getMissedBlocksCounter()
    {
        return $this->missed_blocks_counter;
    }

    /**
     * A counter kept to avoid unnecessary array reads.
     * Note that `Sum(MissedBlocksBitArray)` always equals `MissedBlocksCounter`.
     *
     * Generated from protobuf field <code>int64 missed_blocks_counter = 6 [json_name = "missedBlocksCounter"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setMissedBlocksCounter($var)
    {
        GPBUtil::checkInt64($var);
        $this->missed_blocks_counter = $var;

        return $this;
    }

}

