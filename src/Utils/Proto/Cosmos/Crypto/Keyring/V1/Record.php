<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: cosmos/crypto/keyring/v1/record.proto

namespace Cosmos\Crypto\Keyring\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Record is used for representing a key in the keyring.
 *
 * Generated from protobuf message <code>cosmos.crypto.keyring.v1.Record</code>
 */
class Record extends \Google\Protobuf\Internal\Message
{
    /**
     * name represents a name of Record
     *
     * Generated from protobuf field <code>string name = 1 [json_name = "name"];</code>
     */
    protected $name = '';
    /**
     * pub_key represents a public key in any format
     *
     * Generated from protobuf field <code>.google.protobuf.Any pub_key = 2 [json_name = "pubKey"];</code>
     */
    protected $pub_key = null;
    protected $item;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           name represents a name of Record
     *     @type \Google\Protobuf\Any $pub_key
     *           pub_key represents a public key in any format
     *     @type \Cosmos\Crypto\Keyring\V1\Record\Local $local
     *           local stores the private key locally.
     *     @type \Cosmos\Crypto\Keyring\V1\Record\Ledger $ledger
     *           ledger stores the information about a Ledger key.
     *     @type \Cosmos\Crypto\Keyring\V1\Record\Multi $multi
     *           Multi does not store any other information.
     *     @type \Cosmos\Crypto\Keyring\V1\Record\Offline $offline
     *           Offline does not store any other information.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Cosmos\Crypto\Keyring\V1\Record::initOnce();
        parent::__construct($data);
    }

    /**
     * name represents a name of Record
     *
     * Generated from protobuf field <code>string name = 1 [json_name = "name"];</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * name represents a name of Record
     *
     * Generated from protobuf field <code>string name = 1 [json_name = "name"];</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * pub_key represents a public key in any format
     *
     * Generated from protobuf field <code>.google.protobuf.Any pub_key = 2 [json_name = "pubKey"];</code>
     * @return \Google\Protobuf\Any|null
     */
    public function getPubKey()
    {
        return $this->pub_key;
    }

    public function hasPubKey()
    {
        return isset($this->pub_key);
    }

    public function clearPubKey()
    {
        unset($this->pub_key);
    }

    /**
     * pub_key represents a public key in any format
     *
     * Generated from protobuf field <code>.google.protobuf.Any pub_key = 2 [json_name = "pubKey"];</code>
     * @param \Google\Protobuf\Any $var
     * @return $this
     */
    public function setPubKey($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Any::class);
        $this->pub_key = $var;

        return $this;
    }

    /**
     * local stores the private key locally.
     *
     * Generated from protobuf field <code>.cosmos.crypto.keyring.v1.Record.Local local = 3 [json_name = "local"];</code>
     * @return \Cosmos\Crypto\Keyring\V1\Record\Local|null
     */
    public function getLocal()
    {
        return $this->readOneof(3);
    }

    public function hasLocal()
    {
        return $this->hasOneof(3);
    }

    /**
     * local stores the private key locally.
     *
     * Generated from protobuf field <code>.cosmos.crypto.keyring.v1.Record.Local local = 3 [json_name = "local"];</code>
     * @param \Cosmos\Crypto\Keyring\V1\Record\Local $var
     * @return $this
     */
    public function setLocal($var)
    {
        GPBUtil::checkMessage($var, \Cosmos\Crypto\Keyring\V1\Record\Local::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * ledger stores the information about a Ledger key.
     *
     * Generated from protobuf field <code>.cosmos.crypto.keyring.v1.Record.Ledger ledger = 4 [json_name = "ledger"];</code>
     * @return \Cosmos\Crypto\Keyring\V1\Record\Ledger|null
     */
    public function getLedger()
    {
        return $this->readOneof(4);
    }

    public function hasLedger()
    {
        return $this->hasOneof(4);
    }

    /**
     * ledger stores the information about a Ledger key.
     *
     * Generated from protobuf field <code>.cosmos.crypto.keyring.v1.Record.Ledger ledger = 4 [json_name = "ledger"];</code>
     * @param \Cosmos\Crypto\Keyring\V1\Record\Ledger $var
     * @return $this
     */
    public function setLedger($var)
    {
        GPBUtil::checkMessage($var, \Cosmos\Crypto\Keyring\V1\Record\Ledger::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Multi does not store any other information.
     *
     * Generated from protobuf field <code>.cosmos.crypto.keyring.v1.Record.Multi multi = 5 [json_name = "multi"];</code>
     * @return \Cosmos\Crypto\Keyring\V1\Record\Multi|null
     */
    public function getMulti()
    {
        return $this->readOneof(5);
    }

    public function hasMulti()
    {
        return $this->hasOneof(5);
    }

    /**
     * Multi does not store any other information.
     *
     * Generated from protobuf field <code>.cosmos.crypto.keyring.v1.Record.Multi multi = 5 [json_name = "multi"];</code>
     * @param \Cosmos\Crypto\Keyring\V1\Record\Multi $var
     * @return $this
     */
    public function setMulti($var)
    {
        GPBUtil::checkMessage($var, \Cosmos\Crypto\Keyring\V1\Record\Multi::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * Offline does not store any other information.
     *
     * Generated from protobuf field <code>.cosmos.crypto.keyring.v1.Record.Offline offline = 6 [json_name = "offline"];</code>
     * @return \Cosmos\Crypto\Keyring\V1\Record\Offline|null
     */
    public function getOffline()
    {
        return $this->readOneof(6);
    }

    public function hasOffline()
    {
        return $this->hasOneof(6);
    }

    /**
     * Offline does not store any other information.
     *
     * Generated from protobuf field <code>.cosmos.crypto.keyring.v1.Record.Offline offline = 6 [json_name = "offline"];</code>
     * @param \Cosmos\Crypto\Keyring\V1\Record\Offline $var
     * @return $this
     */
    public function setOffline($var)
    {
        GPBUtil::checkMessage($var, \Cosmos\Crypto\Keyring\V1\Record\Offline::class);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getItem()
    {
        return $this->whichOneof("item");
    }

}

