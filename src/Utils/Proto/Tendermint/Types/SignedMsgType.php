<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: tendermint/types/types.proto

namespace Tendermint\Types;

use UnexpectedValueException;

/**
 * SignedMsgType is a type of signed message in the consensus.
 *
 * Protobuf type <code>tendermint.types.SignedMsgType</code>
 */
class SignedMsgType
{
    /**
     * Generated from protobuf enum <code>SIGNED_MSG_TYPE_UNKNOWN = 0 [(.gogoproto.enumvalue_customname) = "UnknownType"];</code>
     */
    const SIGNED_MSG_TYPE_UNKNOWN = 0;
    /**
     * Votes
     *
     * Generated from protobuf enum <code>SIGNED_MSG_TYPE_PREVOTE = 1 [(.gogoproto.enumvalue_customname) = "PrevoteType"];</code>
     */
    const SIGNED_MSG_TYPE_PREVOTE = 1;
    /**
     * Generated from protobuf enum <code>SIGNED_MSG_TYPE_PRECOMMIT = 2 [(.gogoproto.enumvalue_customname) = "PrecommitType"];</code>
     */
    const SIGNED_MSG_TYPE_PRECOMMIT = 2;
    /**
     * Proposals
     *
     * Generated from protobuf enum <code>SIGNED_MSG_TYPE_PROPOSAL = 32 [(.gogoproto.enumvalue_customname) = "ProposalType"];</code>
     */
    const SIGNED_MSG_TYPE_PROPOSAL = 32;

    private static $valueToName = [
        self::SIGNED_MSG_TYPE_UNKNOWN => 'SIGNED_MSG_TYPE_UNKNOWN',
        self::SIGNED_MSG_TYPE_PREVOTE => 'SIGNED_MSG_TYPE_PREVOTE',
        self::SIGNED_MSG_TYPE_PRECOMMIT => 'SIGNED_MSG_TYPE_PRECOMMIT',
        self::SIGNED_MSG_TYPE_PROPOSAL => 'SIGNED_MSG_TYPE_PROPOSAL',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

