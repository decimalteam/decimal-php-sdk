<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: tendermint/abci/types.proto

namespace Tendermint\Abci\ResponseApplySnapshotChunk;

use UnexpectedValueException;

/**
 * Protobuf type <code>tendermint.abci.ResponseApplySnapshotChunk.Result</code>
 */
class Result
{
    /**
     * Unknown result, abort all snapshot restoration
     *
     * Generated from protobuf enum <code>UNKNOWN = 0;</code>
     */
    const UNKNOWN = 0;
    /**
     * Chunk successfully accepted
     *
     * Generated from protobuf enum <code>ACCEPT = 1;</code>
     */
    const ACCEPT = 1;
    /**
     * Abort all snapshot restoration
     *
     * Generated from protobuf enum <code>ABORT = 2;</code>
     */
    const ABORT = 2;
    /**
     * Retry chunk (combine with refetch and reject)
     *
     * Generated from protobuf enum <code>RETRY = 3;</code>
     */
    const RETRY = 3;
    /**
     * Retry snapshot (combine with refetch and reject)
     *
     * Generated from protobuf enum <code>RETRY_SNAPSHOT = 4;</code>
     */
    const RETRY_SNAPSHOT = 4;
    /**
     * Reject this snapshot, try others
     *
     * Generated from protobuf enum <code>REJECT_SNAPSHOT = 5;</code>
     */
    const REJECT_SNAPSHOT = 5;

    private static $valueToName = [
        self::UNKNOWN => 'UNKNOWN',
        self::ACCEPT => 'ACCEPT',
        self::ABORT => 'ABORT',
        self::RETRY => 'RETRY',
        self::RETRY_SNAPSHOT => 'RETRY_SNAPSHOT',
        self::REJECT_SNAPSHOT => 'REJECT_SNAPSHOT',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Result::class, \Tendermint\Abci\ResponseApplySnapshotChunk_Result::class);

