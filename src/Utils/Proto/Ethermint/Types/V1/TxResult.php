<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: ethermint/types/v1/indexer.proto

namespace Ethermint\Types\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * TxResult is the value stored in eth tx indexer
 *
 * Generated from protobuf message <code>ethermint.types.v1.TxResult</code>
 */
class TxResult extends \Google\Protobuf\Internal\Message
{
    /**
     * the block height
     *
     * Generated from protobuf field <code>int64 height = 1 [json_name = "height"];</code>
     */
    protected $height = 0;
    /**
     * cosmos tx index
     *
     * Generated from protobuf field <code>uint32 tx_index = 2 [json_name = "txIndex"];</code>
     */
    protected $tx_index = 0;
    /**
     * the msg index in a batch tx
     *
     * Generated from protobuf field <code>uint32 msg_index = 3 [json_name = "msgIndex"];</code>
     */
    protected $msg_index = 0;
    /**
     * eth tx index, the index in the list of valid eth tx in the block, 
     * aka. the transaction list returned by eth_getBlock api.
     *
     * Generated from protobuf field <code>int32 eth_tx_index = 4 [json_name = "ethTxIndex"];</code>
     */
    protected $eth_tx_index = 0;
    /**
     * if the eth tx is failed
     *
     * Generated from protobuf field <code>bool failed = 5 [json_name = "failed"];</code>
     */
    protected $failed = false;
    /**
     * gas used by tx, if exceeds block gas limit,
     * it's set to gas limit which is what's actually deducted by ante handler.
     *
     * Generated from protobuf field <code>uint64 gas_used = 6 [json_name = "gasUsed"];</code>
     */
    protected $gas_used = 0;
    /**
     * the cumulative gas used within current batch tx
     *
     * Generated from protobuf field <code>uint64 cumulative_gas_used = 7 [json_name = "cumulativeGasUsed"];</code>
     */
    protected $cumulative_gas_used = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $height
     *           the block height
     *     @type int $tx_index
     *           cosmos tx index
     *     @type int $msg_index
     *           the msg index in a batch tx
     *     @type int $eth_tx_index
     *           eth tx index, the index in the list of valid eth tx in the block, 
     *           aka. the transaction list returned by eth_getBlock api.
     *     @type bool $failed
     *           if the eth tx is failed
     *     @type int|string $gas_used
     *           gas used by tx, if exceeds block gas limit,
     *           it's set to gas limit which is what's actually deducted by ante handler.
     *     @type int|string $cumulative_gas_used
     *           the cumulative gas used within current batch tx
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Ethermint\Types\V1\Indexer::initOnce();
        parent::__construct($data);
    }

    /**
     * the block height
     *
     * Generated from protobuf field <code>int64 height = 1 [json_name = "height"];</code>
     * @return int|string
     */
    public function getHeight()
    {
        return $this->height;
    }

    /**
     * the block height
     *
     * Generated from protobuf field <code>int64 height = 1 [json_name = "height"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setHeight($var)
    {
        GPBUtil::checkInt64($var);
        $this->height = $var;

        return $this;
    }

    /**
     * cosmos tx index
     *
     * Generated from protobuf field <code>uint32 tx_index = 2 [json_name = "txIndex"];</code>
     * @return int
     */
    public function getTxIndex()
    {
        return $this->tx_index;
    }

    /**
     * cosmos tx index
     *
     * Generated from protobuf field <code>uint32 tx_index = 2 [json_name = "txIndex"];</code>
     * @param int $var
     * @return $this
     */
    public function setTxIndex($var)
    {
        GPBUtil::checkUint32($var);
        $this->tx_index = $var;

        return $this;
    }

    /**
     * the msg index in a batch tx
     *
     * Generated from protobuf field <code>uint32 msg_index = 3 [json_name = "msgIndex"];</code>
     * @return int
     */
    public function getMsgIndex()
    {
        return $this->msg_index;
    }

    /**
     * the msg index in a batch tx
     *
     * Generated from protobuf field <code>uint32 msg_index = 3 [json_name = "msgIndex"];</code>
     * @param int $var
     * @return $this
     */
    public function setMsgIndex($var)
    {
        GPBUtil::checkUint32($var);
        $this->msg_index = $var;

        return $this;
    }

    /**
     * eth tx index, the index in the list of valid eth tx in the block, 
     * aka. the transaction list returned by eth_getBlock api.
     *
     * Generated from protobuf field <code>int32 eth_tx_index = 4 [json_name = "ethTxIndex"];</code>
     * @return int
     */
    public function getEthTxIndex()
    {
        return $this->eth_tx_index;
    }

    /**
     * eth tx index, the index in the list of valid eth tx in the block, 
     * aka. the transaction list returned by eth_getBlock api.
     *
     * Generated from protobuf field <code>int32 eth_tx_index = 4 [json_name = "ethTxIndex"];</code>
     * @param int $var
     * @return $this
     */
    public function setEthTxIndex($var)
    {
        GPBUtil::checkInt32($var);
        $this->eth_tx_index = $var;

        return $this;
    }

    /**
     * if the eth tx is failed
     *
     * Generated from protobuf field <code>bool failed = 5 [json_name = "failed"];</code>
     * @return bool
     */
    public function getFailed()
    {
        return $this->failed;
    }

    /**
     * if the eth tx is failed
     *
     * Generated from protobuf field <code>bool failed = 5 [json_name = "failed"];</code>
     * @param bool $var
     * @return $this
     */
    public function setFailed($var)
    {
        GPBUtil::checkBool($var);
        $this->failed = $var;

        return $this;
    }

    /**
     * gas used by tx, if exceeds block gas limit,
     * it's set to gas limit which is what's actually deducted by ante handler.
     *
     * Generated from protobuf field <code>uint64 gas_used = 6 [json_name = "gasUsed"];</code>
     * @return int|string
     */
    public function getGasUsed()
    {
        return $this->gas_used;
    }

    /**
     * gas used by tx, if exceeds block gas limit,
     * it's set to gas limit which is what's actually deducted by ante handler.
     *
     * Generated from protobuf field <code>uint64 gas_used = 6 [json_name = "gasUsed"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setGasUsed($var)
    {
        GPBUtil::checkUint64($var);
        $this->gas_used = $var;

        return $this;
    }

    /**
     * the cumulative gas used within current batch tx
     *
     * Generated from protobuf field <code>uint64 cumulative_gas_used = 7 [json_name = "cumulativeGasUsed"];</code>
     * @return int|string
     */
    public function getCumulativeGasUsed()
    {
        return $this->cumulative_gas_used;
    }

    /**
     * the cumulative gas used within current batch tx
     *
     * Generated from protobuf field <code>uint64 cumulative_gas_used = 7 [json_name = "cumulativeGasUsed"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setCumulativeGasUsed($var)
    {
        GPBUtil::checkUint64($var);
        $this->cumulative_gas_used = $var;

        return $this;
    }

}

