<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: ethermint/types/v1/web3.proto

namespace Ethermint\Types\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>ethermint.types.v1.ExtensionOptionsWeb3Tx</code>
 */
class ExtensionOptionsWeb3Tx extends \Google\Protobuf\Internal\Message
{
    /**
     * typed data chain id used only in EIP712 Domain and should match
     * Ethereum network ID in a Web3 provider (e.g. Metamask).
     *
     * Generated from protobuf field <code>uint64 typed_data_chain_id = 1 [json_name = "typedDataChainId", (.gogoproto.customname) = "TypedDataChainID", (.gogoproto.jsontag) = "typedDataChainID,omitempty"];</code>
     */
    protected $typed_data_chain_id = 0;
    /**
     * fee payer is an account address for the fee payer. It will be validated
     * during EIP712 signature checking.
     *
     * Generated from protobuf field <code>string fee_payer = 2 [json_name = "feePayer", (.gogoproto.jsontag) = "feePayer,omitempty"];</code>
     */
    protected $fee_payer = '';
    /**
     * fee payer sig is a signature data from the fee paying account,
     * allows to perform fee delegation when using EIP712 Domain.
     *
     * Generated from protobuf field <code>bytes fee_payer_sig = 3 [json_name = "feePayerSig", (.gogoproto.jsontag) = "feePayerSig,omitempty"];</code>
     */
    protected $fee_payer_sig = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $typed_data_chain_id
     *           typed data chain id used only in EIP712 Domain and should match
     *           Ethereum network ID in a Web3 provider (e.g. Metamask).
     *     @type string $fee_payer
     *           fee payer is an account address for the fee payer. It will be validated
     *           during EIP712 signature checking.
     *     @type string $fee_payer_sig
     *           fee payer sig is a signature data from the fee paying account,
     *           allows to perform fee delegation when using EIP712 Domain.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Ethermint\Types\V1\Web3::initOnce();
        parent::__construct($data);
    }

    /**
     * typed data chain id used only in EIP712 Domain and should match
     * Ethereum network ID in a Web3 provider (e.g. Metamask).
     *
     * Generated from protobuf field <code>uint64 typed_data_chain_id = 1 [json_name = "typedDataChainId", (.gogoproto.customname) = "TypedDataChainID", (.gogoproto.jsontag) = "typedDataChainID,omitempty"];</code>
     * @return int|string
     */
    public function getTypedDataChainId()
    {
        return $this->typed_data_chain_id;
    }

    /**
     * typed data chain id used only in EIP712 Domain and should match
     * Ethereum network ID in a Web3 provider (e.g. Metamask).
     *
     * Generated from protobuf field <code>uint64 typed_data_chain_id = 1 [json_name = "typedDataChainId", (.gogoproto.customname) = "TypedDataChainID", (.gogoproto.jsontag) = "typedDataChainID,omitempty"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setTypedDataChainId($var)
    {
        GPBUtil::checkUint64($var);
        $this->typed_data_chain_id = $var;

        return $this;
    }

    /**
     * fee payer is an account address for the fee payer. It will be validated
     * during EIP712 signature checking.
     *
     * Generated from protobuf field <code>string fee_payer = 2 [json_name = "feePayer", (.gogoproto.jsontag) = "feePayer,omitempty"];</code>
     * @return string
     */
    public function getFeePayer()
    {
        return $this->fee_payer;
    }

    /**
     * fee payer is an account address for the fee payer. It will be validated
     * during EIP712 signature checking.
     *
     * Generated from protobuf field <code>string fee_payer = 2 [json_name = "feePayer", (.gogoproto.jsontag) = "feePayer,omitempty"];</code>
     * @param string $var
     * @return $this
     */
    public function setFeePayer($var)
    {
        GPBUtil::checkString($var, True);
        $this->fee_payer = $var;

        return $this;
    }

    /**
     * fee payer sig is a signature data from the fee paying account,
     * allows to perform fee delegation when using EIP712 Domain.
     *
     * Generated from protobuf field <code>bytes fee_payer_sig = 3 [json_name = "feePayerSig", (.gogoproto.jsontag) = "feePayerSig,omitempty"];</code>
     * @return string
     */
    public function getFeePayerSig()
    {
        return $this->fee_payer_sig;
    }

    /**
     * fee payer sig is a signature data from the fee paying account,
     * allows to perform fee delegation when using EIP712 Domain.
     *
     * Generated from protobuf field <code>bytes fee_payer_sig = 3 [json_name = "feePayerSig", (.gogoproto.jsontag) = "feePayerSig,omitempty"];</code>
     * @param string $var
     * @return $this
     */
    public function setFeePayerSig($var)
    {
        GPBUtil::checkString($var, False);
        $this->fee_payer_sig = $var;

        return $this;
    }

}

