<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: ethermint/evm/v1/query.proto

namespace Ethermint\Evm\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * EthCallRequest defines EthCall request
 *
 * Generated from protobuf message <code>ethermint.evm.v1.EthCallRequest</code>
 */
class EthCallRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * same json format as the json rpc api.
     *
     * Generated from protobuf field <code>bytes args = 1 [json_name = "args"];</code>
     */
    protected $args = '';
    /**
     * the default gas cap to be used
     *
     * Generated from protobuf field <code>uint64 gas_cap = 2 [json_name = "gasCap"];</code>
     */
    protected $gas_cap = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $args
     *           same json format as the json rpc api.
     *     @type int|string $gas_cap
     *           the default gas cap to be used
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Ethermint\Evm\V1\Query::initOnce();
        parent::__construct($data);
    }

    /**
     * same json format as the json rpc api.
     *
     * Generated from protobuf field <code>bytes args = 1 [json_name = "args"];</code>
     * @return string
     */
    public function getArgs()
    {
        return $this->args;
    }

    /**
     * same json format as the json rpc api.
     *
     * Generated from protobuf field <code>bytes args = 1 [json_name = "args"];</code>
     * @param string $var
     * @return $this
     */
    public function setArgs($var)
    {
        GPBUtil::checkString($var, False);
        $this->args = $var;

        return $this;
    }

    /**
     * the default gas cap to be used
     *
     * Generated from protobuf field <code>uint64 gas_cap = 2 [json_name = "gasCap"];</code>
     * @return int|string
     */
    public function getGasCap()
    {
        return $this->gas_cap;
    }

    /**
     * the default gas cap to be used
     *
     * Generated from protobuf field <code>uint64 gas_cap = 2 [json_name = "gasCap"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setGasCap($var)
    {
        GPBUtil::checkUint64($var);
        $this->gas_cap = $var;

        return $this;
    }

}

